
stm32f303k8_daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800227c  0800227c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800227c  0800227c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800227c  0800227c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800227c  0800227c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000010  08002294  00020010  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08002294  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000876b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016aa  00000000  00000000  000287ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  00029e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017d2f  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004cae  00000000  00000000  000422f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0007bcc7  00000000  00000000  00046fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c2c6c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000006b0  00000000  00000000  000c2ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001de4  00000000  00000000  000c3398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e38 	.word	0x08001e38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001e38 	.word	0x08001e38

080001c8 <arm_sin_q15>:
 * The Q15 input value is in the range [0 +0.9999] and is mapped to a radian value in the range [0 2*pi).
 */

q15_t arm_sin_q15(
  q15_t x)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
  int32_t index;                                 /* Index variables */
  q15_t a, b;                                    /* Four nearest output values */
  q15_t fract;                                   /* Temporary values for fractional values */

  /* Calculate the nearest index */
  index = (uint32_t)x >> FAST_MATH_Q15_SHIFT;
 80001d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001d6:	099b      	lsrs	r3, r3, #6
 80001d8:	617b      	str	r3, [r7, #20]

  /* Calculation of fractional value */
  fract = (x - (index << FAST_MATH_Q15_SHIFT)) << 9;
 80001da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80001de:	697b      	ldr	r3, [r7, #20]
 80001e0:	019b      	lsls	r3, r3, #6
 80001e2:	1ad3      	subs	r3, r2, r3
 80001e4:	025b      	lsls	r3, r3, #9
 80001e6:	827b      	strh	r3, [r7, #18]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_q15[index];
 80001e8:	4a15      	ldr	r2, [pc, #84]	; (8000240 <arm_sin_q15+0x78>)
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001f0:	823b      	strh	r3, [r7, #16]
  b = sinTable_q15[index+1];
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	3301      	adds	r3, #1
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <arm_sin_q15+0x78>)
 80001f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001fc:	81fb      	strh	r3, [r7, #14]

  /* Linear interpolation process */
  sinVal = (q31_t)(0x8000-fract)*a >> 16;
 80001fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000202:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8000206:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800020a:	fb02 f303 	mul.w	r3, r2, r3
 800020e:	141b      	asrs	r3, r3, #16
 8000210:	81bb      	strh	r3, [r7, #12]
  sinVal = (q15_t)((((q31_t)sinVal << 16) + ((q31_t)fract*b)) >> 16);
 8000212:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000216:	041a      	lsls	r2, r3, #16
 8000218:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800021c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000220:	fb01 f303 	mul.w	r3, r1, r3
 8000224:	4413      	add	r3, r2
 8000226:	141b      	asrs	r3, r3, #16
 8000228:	81bb      	strh	r3, [r7, #12]

  return sinVal << 1;
 800022a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	b21b      	sxth	r3, r3
}
 8000232:	4618      	mov	r0, r3
 8000234:	371c      	adds	r7, #28
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	08001e50 	.word	0x08001e50

08000244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f003 0307 	and.w	r3, r3, #7
 8000252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <__NVIC_SetPriorityGrouping+0x44>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000260:	4013      	ands	r3, r2
 8000262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000276:	4a04      	ldr	r2, [pc, #16]	; (8000288 <__NVIC_SetPriorityGrouping+0x44>)
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	60d3      	str	r3, [r2, #12]
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	0a1b      	lsrs	r3, r3, #8
 8000296:	f003 0307 	and.w	r3, r3, #7
}
 800029a:	4618      	mov	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db0b      	blt.n	80002d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <__NVIC_EnableIRQ+0x38>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	db0a      	blt.n	800030e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	490c      	ldr	r1, [pc, #48]	; (8000330 <__NVIC_SetPriority+0x4c>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	0112      	lsls	r2, r2, #4
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	440b      	add	r3, r1
 8000308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800030c:	e00a      	b.n	8000324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4908      	ldr	r1, [pc, #32]	; (8000334 <__NVIC_SetPriority+0x50>)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 030f 	and.w	r3, r3, #15
 800031a:	3b04      	subs	r3, #4
 800031c:	0112      	lsls	r2, r2, #4
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	440b      	add	r3, r1
 8000322:	761a      	strb	r2, [r3, #24]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000e100 	.word	0xe000e100
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000338:	b480      	push	{r7}
 800033a:	b089      	sub	sp, #36	; 0x24
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	f1c3 0307 	rsb	r3, r3, #7
 8000352:	2b04      	cmp	r3, #4
 8000354:	bf28      	it	cs
 8000356:	2304      	movcs	r3, #4
 8000358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3304      	adds	r3, #4
 800035e:	2b06      	cmp	r3, #6
 8000360:	d902      	bls.n	8000368 <NVIC_EncodePriority+0x30>
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	3b03      	subs	r3, #3
 8000366:	e000      	b.n	800036a <NVIC_EncodePriority+0x32>
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	43da      	mvns	r2, r3
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	401a      	ands	r2, r3
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	43d9      	mvns	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	4313      	orrs	r3, r2
         );
}
 8000392:	4618      	mov	r0, r3
 8000394:	3724      	adds	r7, #36	; 0x24
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <LL_DAC_EnableDMAReq>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableDMAReq(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800039e:	b480      	push	{r7}
 80003a0:	b083      	sub	sp, #12
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 0310 	and.w	r3, r3, #16
 80003b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	431a      	orrs	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	601a      	str	r2, [r3, #0]
          DAC_CR_DMAEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <LL_DAC_DMA_GetRegAddr>:
  *         @arg @ref LL_DAC_DMA_REG_DATA_12BITS_LEFT_ALIGNED
  *         @arg @ref LL_DAC_DMA_REG_DATA_8BITS_RIGHT_ALIGNED
  * @retval DAC register address
  */
__STATIC_INLINE uint32_t LL_DAC_DMA_GetRegAddr(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Register)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b087      	sub	sp, #28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  /* Retrieve address of register DHR12Rx, DHR12Lx or DHR8Rx depending on     */
  /* DAC channel selected.                                                    */
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, Register))));
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	3308      	adds	r3, #8
 80003dc:	4619      	mov	r1, r3
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4013      	ands	r3, r2
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	fa92 f2a2 	rbit	r2, r2
 80003ee:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003f0:	693a      	ldr	r2, [r7, #16]
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	b2d2      	uxtb	r2, r2
 80003f8:	40d3      	lsrs	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	440b      	add	r3, r1
}
 80003fe:	4618      	mov	r0, r3
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	431a      	orrs	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f003 0310 	and.w	r3, r3, #16
 800044a:	2104      	movs	r1, #4
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	431a      	orrs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
	...

08000464 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <LL_DMA_EnableChannel+0x3c>)
 8000474:	5cd3      	ldrb	r3, [r2, r3]
 8000476:	461a      	mov	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	3a01      	subs	r2, #1
 8000482:	4907      	ldr	r1, [pc, #28]	; (80004a0 <LL_DMA_EnableChannel+0x3c>)
 8000484:	5c8a      	ldrb	r2, [r1, r2]
 8000486:	4611      	mov	r1, r2
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	440a      	add	r2, r1
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6013      	str	r3, [r2, #0]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	08002254 	.word	0x08002254

080004a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LL_DMA_SetDataTransferDirection+0x48>)
 80004b6:	5cd3      	ldrb	r3, [r2, r3]
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	4413      	add	r3, r2
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004c4:	f023 0310 	bic.w	r3, r3, #16
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	3a01      	subs	r2, #1
 80004cc:	4907      	ldr	r1, [pc, #28]	; (80004ec <LL_DMA_SetDataTransferDirection+0x48>)
 80004ce:	5c8a      	ldrb	r2, [r1, r2]
 80004d0:	4611      	mov	r1, r2
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	440a      	add	r2, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4313      	orrs	r3, r2
 80004dc:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	08002254 	.word	0x08002254

080004f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	3b01      	subs	r3, #1
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <LL_DMA_SetMode+0x44>)
 8000502:	5cd3      	ldrb	r3, [r2, r3]
 8000504:	461a      	mov	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	4413      	add	r3, r2
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f023 0220 	bic.w	r2, r3, #32
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	3b01      	subs	r3, #1
 8000514:	4907      	ldr	r1, [pc, #28]	; (8000534 <LL_DMA_SetMode+0x44>)
 8000516:	5ccb      	ldrb	r3, [r1, r3]
 8000518:	4619      	mov	r1, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	440b      	add	r3, r1
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4313      	orrs	r3, r2
 8000524:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	08002254 	.word	0x08002254

08000538 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <LL_DMA_SetPeriphIncMode+0x44>)
 800054a:	5cd3      	ldrb	r3, [r2, r3]
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	3b01      	subs	r3, #1
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <LL_DMA_SetPeriphIncMode+0x44>)
 800055e:	5ccb      	ldrb	r3, [r1, r3]
 8000560:	4619      	mov	r1, r3
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	440b      	add	r3, r1
 8000566:	4619      	mov	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	08002254 	.word	0x08002254

08000580 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	3b01      	subs	r3, #1
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <LL_DMA_SetMemoryIncMode+0x44>)
 8000592:	5cd3      	ldrb	r3, [r2, r3]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <LL_DMA_SetMemoryIncMode+0x44>)
 80005a6:	5ccb      	ldrb	r3, [r1, r3]
 80005a8:	4619      	mov	r1, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	440b      	add	r3, r1
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	08002254 	.word	0x08002254

080005c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <LL_DMA_SetPeriphSize+0x44>)
 80005da:	5cd3      	ldrb	r3, [r2, r3]
 80005dc:	461a      	mov	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	4907      	ldr	r1, [pc, #28]	; (800060c <LL_DMA_SetPeriphSize+0x44>)
 80005ee:	5ccb      	ldrb	r3, [r1, r3]
 80005f0:	4619      	mov	r1, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	440b      	add	r3, r1
 80005f6:	4619      	mov	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	08002254 	.word	0x08002254

08000610 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <LL_DMA_SetMemorySize+0x44>)
 8000622:	5cd3      	ldrb	r3, [r2, r3]
 8000624:	461a      	mov	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3b01      	subs	r3, #1
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <LL_DMA_SetMemorySize+0x44>)
 8000636:	5ccb      	ldrb	r3, [r1, r3]
 8000638:	4619      	mov	r1, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	440b      	add	r3, r1
 800063e:	4619      	mov	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	08002254 	.word	0x08002254

08000658 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	3b01      	subs	r3, #1
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800067e:	5ccb      	ldrb	r3, [r1, r3]
 8000680:	4619      	mov	r1, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	440b      	add	r3, r1
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	08002254 	.word	0x08002254

080006a0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <LL_DMA_SetDataLength+0x44>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	461a      	mov	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	041b      	lsls	r3, r3, #16
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	3a01      	subs	r2, #1
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <LL_DMA_SetDataLength+0x44>)
 80006c6:	5c8a      	ldrb	r2, [r1, r2]
 80006c8:	4611      	mov	r1, r2
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	440a      	add	r2, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	08002254 	.word	0x08002254

080006e8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d114      	bne.n	8000726 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a16      	ldr	r2, [pc, #88]	; (800075c <LL_DMA_ConfigAddresses+0x74>)
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	461a      	mov	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a11      	ldr	r2, [pc, #68]	; (800075c <LL_DMA_ConfigAddresses+0x74>)
 8000716:	5cd3      	ldrb	r3, [r2, r3]
 8000718:	461a      	mov	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4413      	add	r3, r2
 800071e:	461a      	mov	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000724:	e013      	b.n	800074e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <LL_DMA_ConfigAddresses+0x74>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3b01      	subs	r3, #1
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <LL_DMA_ConfigAddresses+0x74>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	461a      	mov	r2, r3
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	60d3      	str	r3, [r2, #12]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	08002254 	.word	0x08002254

08000760 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <LL_DMA_EnableIT_TC+0x3c>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	461a      	mov	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	3a01      	subs	r2, #1
 800077e:	4907      	ldr	r1, [pc, #28]	; (800079c <LL_DMA_EnableIT_TC+0x3c>)
 8000780:	5c8a      	ldrb	r2, [r1, r2]
 8000782:	4611      	mov	r1, r2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	440a      	add	r2, r1
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6013      	str	r3, [r2, #0]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08002254 	.word	0x08002254

080007a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <LL_RCC_HSI_Enable+0x1c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <LL_RCC_HSI_Enable+0x1c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_RCC_HSI_IsReady+0x20>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	bf0c      	ite	eq
 80007d0:	2301      	moveq	r3, #1
 80007d2:	2300      	movne	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4904      	ldr	r1, [pc, #16]	; (800080c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	600b      	str	r3, [r1, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_SetSysClkSource+0x24>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f023 0203 	bic.w	r2, r3, #3
 8000820:	4904      	ldr	r1, [pc, #16]	; (8000834 <LL_RCC_SetSysClkSource+0x24>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	604b      	str	r3, [r1, #4]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <LL_RCC_GetSysClkSource+0x18>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <LL_RCC_SetAHBPrescaler+0x24>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000864:	4904      	ldr	r1, [pc, #16]	; (8000878 <LL_RCC_SetAHBPrescaler+0x24>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	604b      	str	r3, [r1, #4]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40021000 	.word	0x40021000

0800087c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4313      	orrs	r3, r2
 8000892:	604b      	str	r3, [r1, #4]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000

080008a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80008b4:	4904      	ldr	r1, [pc, #16]	; (80008c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	604b      	str	r3, [r1, #4]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_RCC_GetTIMClockSource>:
  *         @arg @ref LL_RCC_TIM34_CLKSOURCE_PLL (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetTIMClockSource(uint32_t TIMx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_TIM1SW << TIMx)) | (TIMx << 27U));
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <LL_RCC_GetTIMClockSource+0x2c>)
 80008d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	06db      	lsls	r3, r3, #27
 80008e8:	4313      	orrs	r3, r2
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <LL_RCC_PLL_Enable+0x1c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <LL_RCC_PLL_Enable+0x1c>)
 8000906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <LL_RCC_PLL_IsReady+0x24>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	430b      	orrs	r3, r1
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000962:	4313      	orrs	r3, r2
 8000964:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	f023 020f 	bic.w	r2, r3, #15
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	4904      	ldr	r1, [pc, #16]	; (8000988 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000976:	4313      	orrs	r3, r2
 8000978:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4313      	orrs	r3, r2
 800099e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4013      	ands	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000

080009bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009c6:	69da      	ldr	r2, [r3, #28]
 80009c8:	4907      	ldr	r1, [pc, #28]	; (80009e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80009d2:	69da      	ldr	r2, [r3, #28]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000

080009ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009f6:	699a      	ldr	r2, [r3, #24]
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a02:	699a      	ldr	r2, [r3, #24]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000

08000a1c <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	0a1b      	lsrs	r3, r3, #8
 8000a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a30:	43db      	mvns	r3, r3
 8000a32:	401a      	ands	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a3a:	4904      	ldr	r1, [pc, #16]	; (8000a4c <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	600b      	str	r3, [r1, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40010000 	.word	0x40010000

08000a50 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <LL_FLASH_SetLatency+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f023 0207 	bic.w	r2, r3, #7
 8000a60:	4904      	ldr	r1, [pc, #16]	; (8000a74 <LL_FLASH_SetLatency+0x24>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40022000 	.word	0x40022000

08000a78 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <LL_FLASH_GetLatency+0x18>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0307 	and.w	r3, r3, #7
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40022000 	.word	0x40022000

08000a94 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d106      	bne.n	8000ab0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <LL_SYSTICK_SetClkSource+0x34>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <LL_SYSTICK_SetClkSource+0x34>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000aae:	e005      	b.n	8000abc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <LL_SYSTICK_SetClkSource+0x34>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <LL_SYSTICK_SetClkSource+0x34>)
 8000ab6:	f023 0304 	bic.w	r3, r3, #4
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	609a      	str	r2, [r3, #8]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f043 0201 	orr.w	r2, r3, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	609a      	str	r2, [r3, #8]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff feea 	bl	80009ec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c1c:	f7ff fece 	bl	80009bc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f7ff fb0f 	bl	8000244 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f825 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 f993 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2e:	f000 f979 	bl	8000f24 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c32:	f000 f863 	bl	8000cfc <MX_DAC1_Init>
  MX_TIM6_Init();
 8000c36:	f000 f8f5 	bl	8000e24 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000c3a:	f000 f91f 	bl	8000e7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t samplerate = LL_RCC_GetTIMClockFreq( LL_RCC_GetTIMClockSource(TIM6) ) /
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <main+0x64>)
 8000c40:	f7ff fe44 	bl	80008cc <LL_RCC_GetTIMClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fe54 	bl	80018f4 <LL_RCC_GetTIMClockFreq>
 8000c4c:	4604      	mov	r4, r0
  		(LL_TIM_GetAutoReload(TIM6) + 1) / (LL_TIM_GetPrescaler(TIM6) + 1);
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <main+0x64>)
 8000c50:	f7ff ff68 	bl	8000b24 <LL_TIM_GetAutoReload>
 8000c54:	4603      	mov	r3, r0
 8000c56:	3301      	adds	r3, #1
  uint32_t samplerate = LL_RCC_GetTIMClockFreq( LL_RCC_GetTIMClockSource(TIM6) ) /
 8000c58:	fbb4 f4f3 	udiv	r4, r4, r3
  		(LL_TIM_GetAutoReload(TIM6) + 1) / (LL_TIM_GetPrescaler(TIM6) + 1);
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <main+0x64>)
 8000c5e:	f7ff ff55 	bl	8000b0c <LL_TIM_GetPrescaler>
 8000c62:	4603      	mov	r3, r0
 8000c64:	3301      	adds	r3, #1
  uint32_t samplerate = LL_RCC_GetTIMClockFreq( LL_RCC_GetTIMClockSource(TIM6) ) /
 8000c66:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c6a:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <main+0x60>
 8000c6e:	bf00      	nop
 8000c70:	40001000 	.word	0x40001000

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff fee9 	bl	8000a50 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000c7e:	f7ff fefb 	bl	8000a78 <LL_FLASH_GetLatency>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000c88:	f000 f994 	bl	8000fb4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000c8c:	f7ff fd88 	bl	80007a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c90:	bf00      	nop
 8000c92:	f7ff fd95 	bl	80007c0 <LL_RCC_HSI_IsReady>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d1fa      	bne.n	8000c92 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c9c:	2010      	movs	r0, #16
 8000c9e:	f7ff fda1 	bl	80007e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8000ca2:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fe4c 	bl	8000944 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cac:	f7ff fe26 	bl	80008fc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cb0:	bf00      	nop
 8000cb2:	f7ff fe33 	bl	800091c <LL_RCC_PLL_IsReady>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d1fa      	bne.n	8000cb2 <SystemClock_Config+0x3e>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fdc9 	bl	8000854 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000cc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cc6:	f7ff fdd9 	bl	800087c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fdea 	bl	80008a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fd9d 	bl	8000810 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff fdae 	bl	8000838 <LL_RCC_GetSysClkSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d1fa      	bne.n	8000cd8 <SystemClock_Config+0x64>
  {
  
  }
  LL_Init1msTick(64000000);
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <SystemClock_Config+0x84>)
 8000ce4:	f001 f866 	bl	8001db4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff fed3 	bl	8000a94 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(64000000);
 8000cee:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <SystemClock_Config+0x84>)
 8000cf0:	f001 f86e 	bl	8001dd0 <LL_SetSystemCoreClock>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	03d09000 	.word	0x03d09000

08000cfc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b08d      	sub	sp, #52	; 0x34
 8000d00:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8000d20:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000d24:	f7ff fe4a 	bl	80009bc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d2c:	f7ff fe2e 	bl	800098c <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d30:	2310      	movs	r3, #16
 8000d32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f000 fc44 	bl	80015d0 <LL_GPIO_Init>

  /* DAC1 DMA Init */
  
  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000d48:	2210      	movs	r2, #16
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	4830      	ldr	r0, [pc, #192]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d4e:	f7ff fba9 	bl	80004a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2103      	movs	r1, #3
 8000d56:	482e      	ldr	r0, [pc, #184]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d58:	f7ff fc7e 	bl	8000658 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2103      	movs	r1, #3
 8000d60:	482b      	ldr	r0, [pc, #172]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d62:	f7ff fbc5 	bl	80004f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2103      	movs	r1, #3
 8000d6a:	4829      	ldr	r0, [pc, #164]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d6c:	f7ff fbe4 	bl	8000538 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	2103      	movs	r1, #3
 8000d74:	4826      	ldr	r0, [pc, #152]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d76:	f7ff fc03 	bl	8000580 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 8000d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7e:	2103      	movs	r1, #3
 8000d80:	4823      	ldr	r0, [pc, #140]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d82:	f7ff fc21 	bl	80005c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8000d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	4820      	ldr	r0, [pc, #128]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000d8e:	f7ff fc3f 	bl	8000610 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 8000d92:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MX_DAC1_Init+0x118>)
 8000d94:	f7ff fe42 	bl	8000a1c <LL_SYSCFG_SetRemapDMA_DAC>

  /* USER CODE BEGIN DAC1_Init 1 */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3,
 8000d98:	4c1f      	ldr	r4, [pc, #124]	; (8000e18 <MX_DAC1_Init+0x11c>)
 8000d9a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000d9e:	491f      	ldr	r1, [pc, #124]	; (8000e1c <MX_DAC1_Init+0x120>)
 8000da0:	481f      	ldr	r0, [pc, #124]	; (8000e20 <MX_DAC1_Init+0x124>)
 8000da2:	f7ff fb13 	bl	80003cc <LL_DAC_DMA_GetRegAddr>
 8000da6:	4602      	mov	r2, r0
 8000da8:	2310      	movs	r3, #16
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	4622      	mov	r2, r4
 8000db0:	2103      	movs	r1, #3
 8000db2:	4817      	ldr	r0, [pc, #92]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000db4:	f7ff fc98 	bl	80006e8 <LL_DMA_ConfigAddresses>
    		(uint32_t)dac_buf0,
  			LL_DAC_DMA_GetRegAddr(DAC1,LL_DAC_CHANNEL_1, LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED),
  			LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, DAC_BUF_LEN);
 8000db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000dc0:	f7ff fc6e 	bl	80006a0 <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	4812      	ldr	r0, [pc, #72]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000dc8:	f7ff fb4c 	bl	8000464 <LL_DMA_EnableChannel>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 8000dcc:	2103      	movs	r1, #3
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <MX_DAC1_Init+0x114>)
 8000dd0:	f7ff fcc6 	bl	8000760 <LL_DMA_EnableIT_TC>

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM6_TRGO;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	461a      	mov	r2, r3
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <MX_DAC1_Init+0x120>)
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_DAC1_Init+0x124>)
 8000dea:	f000 fa9b 	bl	8001324 <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000dee:	490b      	ldr	r1, [pc, #44]	; (8000e1c <MX_DAC1_Init+0x120>)
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <MX_DAC1_Init+0x124>)
 8000df2:	f7ff fb20 	bl	8000436 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */
	LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 8000df6:	4909      	ldr	r1, [pc, #36]	; (8000e1c <MX_DAC1_Init+0x120>)
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <MX_DAC1_Init+0x124>)
 8000dfa:	f7ff fb06 	bl	800040a <LL_DAC_Enable>
	LL_DAC_EnableDMAReq(DAC1, LL_DAC_CHANNEL_1);
 8000dfe:	4907      	ldr	r1, [pc, #28]	; (8000e1c <MX_DAC1_Init+0x120>)
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_DAC1_Init+0x124>)
 8000e02:	f7ff facc 	bl	800039e <LL_DAC_EnableDMAReq>
  /* USER CODE END DAC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	372c      	adds	r7, #44	; 0x2c
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd90      	pop	{r4, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40020000 	.word	0x40020000
 8000e14:	00202000 	.word	0x00202000
 8000e18:	20000030 	.word	0x20000030
 8000e1c:	02100001 	.word	0x02100001
 8000e20:	40007400 	.word	0x40007400

08000e24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f7ff fdbf 	bl	80009bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 6;
 8000e3e:	2306      	movs	r3, #6
 8000e40:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 8000e46:	2331      	movs	r3, #49	; 0x31
 8000e48:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <MX_TIM6_Init+0x54>)
 8000e50:	f000 fe4c 	bl	8001aec <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_TIM6_Init+0x54>)
 8000e56:	f7ff fe49 	bl	8000aec <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_UPDATE);
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_TIM6_Init+0x54>)
 8000e5e:	f7ff fe6d 	bl	8000b3c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_TIM6_Init+0x54>)
 8000e64:	f7ff fe7d 	bl	8000b62 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
  LL_TIM_EnableCounter(TIM6);
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <MX_TIM6_Init+0x54>)
 8000e6a:	f7ff fe2f 	bl	8000acc <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001000 	.word	0x40001000

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ea6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000eaa:	f7ff fd87 	bl	80009bc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000eae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000eb2:	f7ff fd6b 	bl	800098c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000eb6:	f248 0304 	movw	r3, #32772	; 0x8004
 8000eba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f000 fb7a 	bl	80015d0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000edc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ee0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_USART2_UART_Init+0xa4>)
 8000f02:	f000 fed1 	bl	8001ca8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_USART2_UART_Init+0xa4>)
 8000f08:	f7ff fe61 	bl	8000bce <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_USART2_UART_Init+0xa4>)
 8000f0e:	f7ff fe48 	bl	8000ba2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_USART2_UART_Init+0xa4>)
 8000f14:	f7ff fe35 	bl	8000b82 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3738      	adds	r7, #56	; 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fd2f 	bl	800098c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f2e:	f7ff f9ad 	bl	800028c <__NVIC_GetPriorityGrouping>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f9fd 	bl	8000338 <NVIC_EncodePriority>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4619      	mov	r1, r3
 8000f42:	200d      	movs	r0, #13
 8000f44:	f7ff f9ce 	bl	80002e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f48:	200d      	movs	r0, #13
 8000f4a:	f7ff f9ad 	bl	80002a8 <__NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000f6a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f6e:	f7ff fd0d 	bl	800098c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f76:	f7ff fd09 	bl	800098c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f7e:	f7ff fd05 	bl	800098c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8000f82:	2108      	movs	r1, #8
 8000f84:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <MX_GPIO_Init+0x5c>)
 8000f86:	f7ff fe32 	bl	8000bee <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <MX_GPIO_Init+0x5c>)
 8000fa4:	f000 fb14 	bl	80015d0 <LL_GPIO_Init>

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <LL_DMA_SetMemoryAddress>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <LL_DMA_SetMemoryAddress+0x2c>)
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	0800225c 	.word	0x0800225c

08000ff4 <LL_DMA_IsActiveFlag_TC3>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001008:	bf0c      	ite	eq
 800100a:	2301      	moveq	r3, #1
 800100c:	2300      	movne	r3, #0
 800100e:	b2db      	uxtb	r3, r3
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_DMA_ClearFlag_GI3>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102a:	605a      	str	r2, [r3, #4]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_DMA_ClearFlag_TC3>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC3(DMA1)) {
 80010ba:	4844      	ldr	r0, [pc, #272]	; (80011cc <DMA1_Channel3_IRQHandler+0x118>)
 80010bc:	f7ff ff9a 	bl	8000ff4 <LL_DMA_IsActiveFlag_TC3>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d07e      	beq.n	80011c4 <DMA1_Channel3_IRQHandler+0x110>
		LL_DMA_ClearFlag_GI3(DMA1);
 80010c6:	4841      	ldr	r0, [pc, #260]	; (80011cc <DMA1_Channel3_IRQHandler+0x118>)
 80010c8:	f7ff ffa8 	bl	800101c <LL_DMA_ClearFlag_GI3>
		LL_DMA_ClearFlag_TC3(DMA1);
 80010cc:	483f      	ldr	r0, [pc, #252]	; (80011cc <DMA1_Channel3_IRQHandler+0x118>)
 80010ce:	f7ff ffb3 	bl	8001038 <LL_DMA_ClearFlag_TC3>

		if (half) {
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <DMA1_Channel3_IRQHandler+0x11c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d020      	beq.n	800111c <DMA1_Channel3_IRQHandler+0x68>
			half=0;
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <DMA1_Channel3_IRQHandler+0x11c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

			LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t) dac_buf0);
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <DMA1_Channel3_IRQHandler+0x120>)
 80010e2:	461a      	mov	r2, r3
 80010e4:	2103      	movs	r1, #3
 80010e6:	4839      	ldr	r0, [pc, #228]	; (80011cc <DMA1_Channel3_IRQHandler+0x118>)
 80010e8:	f7ff ff6c 	bl	8000fc4 <LL_DMA_SetMemoryAddress>

			for (uint32_t i=0; i<DAC_BUF_LEN; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	e010      	b.n	8001114 <DMA1_Channel3_IRQHandler+0x60>
				dac_buf1[i] = ((int32_t) 0x8000 + fcn(phase) )>>4;
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <DMA1_Channel3_IRQHandler+0x124>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f87a 	bl	80011f0 <fcn>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001102:	111b      	asrs	r3, r3, #4
 8001104:	b299      	uxth	r1, r3
 8001106:	4a35      	ldr	r2, [pc, #212]	; (80011dc <DMA1_Channel3_IRQHandler+0x128>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint32_t i=0; i<DAC_BUF_LEN; i++) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3301      	adds	r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2bff      	cmp	r3, #255	; 0xff
 8001118:	d9eb      	bls.n	80010f2 <DMA1_Channel3_IRQHandler+0x3e>
 800111a:	e01f      	b.n	800115c <DMA1_Channel3_IRQHandler+0xa8>
			}

		} else {
			half=1;
 800111c:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <DMA1_Channel3_IRQHandler+0x11c>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

			LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t) dac_buf1);
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <DMA1_Channel3_IRQHandler+0x128>)
 8001124:	461a      	mov	r2, r3
 8001126:	2103      	movs	r1, #3
 8001128:	4828      	ldr	r0, [pc, #160]	; (80011cc <DMA1_Channel3_IRQHandler+0x118>)
 800112a:	f7ff ff4b 	bl	8000fc4 <LL_DMA_SetMemoryAddress>

			for (uint32_t i=0; i<DAC_BUF_LEN; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	e010      	b.n	8001156 <DMA1_Channel3_IRQHandler+0xa2>
				dac_buf0[i] = ((int32_t) 0x8000 + fcn(phase) )>>4;
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <DMA1_Channel3_IRQHandler+0x124>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f859 	bl	80011f0 <fcn>
 800113e:	4603      	mov	r3, r0
 8001140:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001144:	111b      	asrs	r3, r3, #4
 8001146:	b299      	uxth	r1, r3
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <DMA1_Channel3_IRQHandler+0x120>)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint32_t i=0; i<DAC_BUF_LEN; i++) {
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2bff      	cmp	r3, #255	; 0xff
 800115a:	d9eb      	bls.n	8001134 <DMA1_Channel3_IRQHandler+0x80>
			}
		}

		freq = freq + finc*4;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <DMA1_Channel3_IRQHandler+0x12c>)
 800115e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001162:	b29b      	uxth	r3, r3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4413      	add	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 8001172:	801a      	strh	r2, [r3, #0]

		if (freq > f_max) {
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 8001176:	881a      	ldrh	r2, [r3, #0]
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <DMA1_Channel3_IRQHandler+0x134>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d90e      	bls.n	800119e <DMA1_Channel3_IRQHandler+0xea>
			freq = 2 * f_max - freq;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <DMA1_Channel3_IRQHandler+0x134>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 8001192:	801a      	strh	r2, [r3, #0]
			finc = -1;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <DMA1_Channel3_IRQHandler+0x12c>)
 8001196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800119c:	e012      	b.n	80011c4 <DMA1_Channel3_IRQHandler+0x110>
		} else if (freq < f_min) {
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 80011a0:	881a      	ldrh	r2, [r3, #0]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <DMA1_Channel3_IRQHandler+0x138>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d20c      	bcs.n	80011c4 <DMA1_Channel3_IRQHandler+0x110>
			freq = 2 * f_min - freq;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <DMA1_Channel3_IRQHandler+0x138>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <DMA1_Channel3_IRQHandler+0x130>)
 80011bc:	801a      	strh	r2, [r3, #0]
			finc = +1;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <DMA1_Channel3_IRQHandler+0x12c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	801a      	strh	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020000 	.word	0x40020000
 80011d0:	20000430 	.word	0x20000430
 80011d4:	20000030 	.word	0x20000030
 80011d8:	20000434 	.word	0x20000434
 80011dc:	20000230 	.word	0x20000230
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000002 	.word	0x20000002
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000006 	.word	0x20000006

080011f0 <fcn>:

/* USER CODE BEGIN 1 */
static inline int16_t fcn()
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
	int16_t result = (arm_sin_q15(phase>>1) >> 1) + (arm_sin_q15(phase2>>1) >> 3) ;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <fcn+0x6c>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	085b      	lsrs	r3, r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffe1 	bl	80001c8 <arm_sin_q15>
 8001206:	4603      	mov	r3, r0
 8001208:	105b      	asrs	r3, r3, #1
 800120a:	b21b      	sxth	r3, r3
 800120c:	b29c      	uxth	r4, r3
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <fcn+0x70>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	085b      	lsrs	r3, r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	b21b      	sxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd5 	bl	80001c8 <arm_sin_q15>
 800121e:	4603      	mov	r3, r0
 8001220:	10db      	asrs	r3, r3, #3
 8001222:	b21b      	sxth	r3, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	4423      	add	r3, r4
 8001228:	b29b      	uxth	r3, r3
 800122a:	80fb      	strh	r3, [r7, #6]
	phase = phase + freq;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <fcn+0x6c>)
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <fcn+0x74>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <fcn+0x6c>)
 800123a:	801a      	strh	r2, [r3, #0]
	phase2 = phase2 + 4*(freq);
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <fcn+0x74>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <fcn+0x70>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	4413      	add	r3, r2
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <fcn+0x70>)
 800124e:	801a      	strh	r2, [r3, #0]
	return result;
 8001250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	20000434 	.word	0x20000434
 8001260:	20000000 	.word	0x20000000
 8001264:	20000002 	.word	0x20000002

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <SystemInit+0x28>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <SystemInit+0x28>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SystemInit+0x28>)
 800127e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001282:	609a      	str	r2, [r3, #8]
#endif
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001298:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800129a:	e003      	b.n	80012a4 <LoopCopyDataInit>

0800129c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800129e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012a2:	3104      	adds	r1, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012ac:	d3f6      	bcc.n	800129c <CopyDataInit>
	ldr	r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80012b0:	e002      	b.n	80012b8 <LoopFillZerobss>

080012b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012b4:	f842 3b04 	str.w	r3, [r2], #4

080012b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <LoopForever+0x16>)
	cmp	r2, r3
 80012ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012bc:	d3f9      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012be:	f7ff ffd3 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f000 fd95 	bl	8001df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c6:	f7ff fca1 	bl	8000c0c <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80012d0:	08002284 	.word	0x08002284
	ldr	r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012d8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80012dc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80012e0:	20000438 	.word	0x20000438

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>

080012e6 <LL_DAC_IsEnabled>:
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	429a      	cmp	r2, r3
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001330:	2300      	movs	r3, #0
 8001332:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7ff ffd5 	bl	80012e6 <LL_DAC_IsEnabled>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d13a      	bne.n	80013b8 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d01e      	beq.n	8001388 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	f640 71fa 	movw	r1, #4090	; 0xffa
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4319      	orrs	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4319      	orrs	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4319      	orrs	r1, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	431a      	orrs	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e019      	b.n	80013bc <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	21fa      	movs	r1, #250	; 0xfa
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4319      	orrs	r1, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e001      	b.n	80013bc <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LL_GPIO_SetPinMode>:
{
 80013c6:	b480      	push	{r7}
 80013c8:	b089      	sub	sp, #36	; 0x24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	613b      	str	r3, [r7, #16]
  return result;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2103      	movs	r1, #3
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	401a      	ands	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	61bb      	str	r3, [r7, #24]
  return result;
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	431a      	orrs	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	3724      	adds	r7, #36	; 0x24
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_GPIO_SetPinOutputType>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	43db      	mvns	r3, r3
 8001438:	401a      	ands	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	431a      	orrs	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	605a      	str	r2, [r3, #4]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_GPIO_SetPinSpeed>:
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	613b      	str	r3, [r7, #16]
  return result;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2103      	movs	r1, #3
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	61bb      	str	r3, [r7, #24]
  return result;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	609a      	str	r2, [r3, #8]
}
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_GPIO_SetPinPull>:
{
 80014b2:	b480      	push	{r7}
 80014b4:	b089      	sub	sp, #36	; 0x24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	613b      	str	r3, [r7, #16]
  return result;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2103      	movs	r1, #3
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	401a      	ands	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	61bb      	str	r3, [r7, #24]
  return result;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	431a      	orrs	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	60da      	str	r2, [r3, #12]
}
 8001504:	bf00      	nop
 8001506:	3724      	adds	r7, #36	; 0x24
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_GPIO_SetAFPin_0_7>:
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	613b      	str	r3, [r7, #16]
  return result;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	210f      	movs	r1, #15
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	61bb      	str	r3, [r7, #24]
  return result;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	621a      	str	r2, [r3, #32]
}
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_GPIO_SetAFPin_8_15>:
{
 800156e:	b480      	push	{r7}
 8001570:	b089      	sub	sp, #36	; 0x24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	613b      	str	r3, [r7, #16]
  return result;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	210f      	movs	r1, #15
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	61bb      	str	r3, [r7, #24]
  return result;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	431a      	orrs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015c4:	bf00      	nop
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	613b      	str	r3, [r7, #16]
  return result;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80015f2:	e049      	b.n	8001688 <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03b      	beq.n	8001682 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	461a      	mov	r2, r3
 8001610:	69b9      	ldr	r1, [r7, #24]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fed7 	bl	80013c6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d003      	beq.n	8001628 <LL_GPIO_Init+0x58>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d106      	bne.n	8001636 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	461a      	mov	r2, r3
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff0f 	bl	8001454 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	461a      	mov	r2, r3
 800163c:	69b9      	ldr	r1, [r7, #24]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff37 	bl	80014b2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d11a      	bne.n	8001682 <LL_GPIO_Init+0xb2>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	60bb      	str	r3, [r7, #8]
  return result;
 8001658:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b07      	cmp	r3, #7
 8001662:	d807      	bhi.n	8001674 <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	461a      	mov	r2, r3
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff4f 	bl	8001510 <LL_GPIO_SetAFPin_0_7>
 8001672:	e006      	b.n	8001682 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	461a      	mov	r2, r3
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff76 	bl	800156e <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ae      	bne.n	80015f4 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d003      	beq.n	80016a6 <LL_GPIO_Init+0xd6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d107      	bne.n	80016b6 <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	461a      	mov	r2, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff feb7 	bl	8001424 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <LL_RCC_HSI_IsReady>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <LL_RCC_HSI_IsReady+0x20>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000

080016e4 <LL_RCC_LSE_IsReady>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <LL_RCC_LSE_IsReady+0x20>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000

08001708 <LL_RCC_GetSysClkSource>:
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <LL_RCC_GetSysClkSource+0x18>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000

08001724 <LL_RCC_GetAHBPrescaler>:
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <LL_RCC_GetAHBPrescaler+0x18>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <LL_RCC_GetAPB1Prescaler>:
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <LL_RCC_GetAPB2Prescaler>:
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <LL_RCC_GetUSARTClockSource>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <LL_RCC_GetUSARTClockSource+0x28>)
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	2103      	movs	r1, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	401a      	ands	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	061b      	lsls	r3, r3, #24
 8001792:	4313      	orrs	r3, r2
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_RCC_GetTIMClockSource>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_TIM1SW << TIMx)) | (TIMx << 27U));
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <LL_RCC_GetTIMClockSource+0x2c>)
 80017ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	06db      	lsls	r3, r3, #27
 80017c0:	4313      	orrs	r3, r2
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <LL_RCC_PLL_GetMainSource+0x18>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <LL_RCC_PLL_GetPrediv+0x18>)
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f003 030f 	and.w	r3, r3, #15
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001830:	f000 f884 	bl	800193c <RCC_GetSystemClockFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f89e 	bl	8001980 <RCC_GetHCLKClockFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f8ac 	bl	80019ac <RCC_GetPCLK1ClockFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8b8 	bl	80019d4 <RCC_GetPCLK2ClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60da      	str	r2, [r3, #12]
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d12a      	bne.n	80018dc <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff76 	bl	8001778 <LL_RCC_GetUSARTClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b02      	cmp	r3, #2
 8001890:	d00f      	beq.n	80018b2 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001892:	2b03      	cmp	r3, #3
 8001894:	d005      	beq.n	80018a2 <LL_RCC_GetUSARTClockFreq+0x2e>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d114      	bne.n	80018c4 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800189a:	f000 f84f 	bl	800193c <RCC_GetSystemClockFreq>
 800189e:	60f8      	str	r0, [r7, #12]
        break;
 80018a0:	e021      	b.n	80018e6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80018a2:	f7ff ff0d 	bl	80016c0 <LL_RCC_HSI_IsReady>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d019      	beq.n	80018e0 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <LL_RCC_GetUSARTClockFreq+0x7c>)
 80018ae:	60fb      	str	r3, [r7, #12]
        }
        break;
 80018b0:	e016      	b.n	80018e0 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80018b2:	f7ff ff17 	bl	80016e4 <LL_RCC_LSE_IsReady>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80018bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80018c2:	e00f      	b.n	80018e4 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80018c4:	f000 f83a 	bl	800193c <RCC_GetSystemClockFreq>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f858 	bl	8001980 <RCC_GetHCLKClockFreq>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f86a 	bl	80019ac <RCC_GetPCLK1ClockFreq>
 80018d8:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80018da:	e004      	b.n	80018e6 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80018e4:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <LL_RCC_GetTIMClockFreq>:
  *
  *         (*) value not defined in all devices
  * @retval TIM clock frequency (in Hz)
  */
uint32_t LL_RCC_GetTIMClockFreq(uint32_t TIMxSource)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tim_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_TIM_CLKSOURCE(TIMxSource));

  if (TIMxSource == LL_RCC_TIM1_CLKSOURCE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d114      	bne.n	8001930 <LL_RCC_GetTIMClockFreq+0x3c>
  {
    /* TIM1CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM1_CLKSOURCE) == LL_RCC_TIM1_CLKSOURCE_PCLK2)
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ff4c 	bl	80017a4 <LL_RCC_GetTIMClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10b      	bne.n	800192a <LL_RCC_GetTIMClockFreq+0x36>
    {
      /* PCLK2 used as TIM1 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001912:	f000 f813 	bl	800193c <RCC_GetSystemClockFreq>
 8001916:	4603      	mov	r3, r0
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f831 	bl	8001980 <RCC_GetHCLKClockFreq>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f857 	bl	80019d4 <RCC_GetPCLK2ClockFreq>
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	e002      	b.n	8001930 <LL_RCC_GetTIMClockFreq+0x3c>
    }
    else /* LL_RCC_TIM1_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM1 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 800192a:	f000 f867 	bl	80019fc <RCC_PLL_GetFreqDomain_SYS>
 800192e:	60f8      	str	r0, [r7, #12]
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
    }
  }
#endif /*RCC_CFGR3_TIM34SW*/

  return tim_frequency;
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001946:	f7ff fedf 	bl	8001708 <LL_RCC_GetSysClkSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b04      	cmp	r3, #4
 800194e:	d006      	beq.n	800195e <RCC_GetSystemClockFreq+0x22>
 8001950:	2b08      	cmp	r3, #8
 8001952:	d007      	beq.n	8001964 <RCC_GetSystemClockFreq+0x28>
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <RCC_GetSystemClockFreq+0x40>)
 800195a:	607b      	str	r3, [r7, #4]
      break;
 800195c:	e009      	b.n	8001972 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <RCC_GetSystemClockFreq+0x40>)
 8001960:	607b      	str	r3, [r7, #4]
      break;
 8001962:	e006      	b.n	8001972 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001964:	f000 f84a 	bl	80019fc <RCC_PLL_GetFreqDomain_SYS>
 8001968:	6078      	str	r0, [r7, #4]
      break;
 800196a:	e002      	b.n	8001972 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <RCC_GetSystemClockFreq+0x40>)
 800196e:	607b      	str	r3, [r7, #4]
      break;
 8001970:	bf00      	nop
  }

  return frequency;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	007a1200 	.word	0x007a1200

08001980 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001988:	f7ff fecc 	bl	8001724 <LL_RCC_GetAHBPrescaler>
 800198c:	4603      	mov	r3, r0
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <RCC_GetHCLKClockFreq+0x28>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	40d3      	lsrs	r3, r2
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08002264 	.word	0x08002264

080019ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80019b4:	f7ff fec4 	bl	8001740 <LL_RCC_GetAPB1Prescaler>
 80019b8:	4603      	mov	r3, r0
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	40d3      	lsrs	r3, r2
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	08002274 	.word	0x08002274

080019d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80019dc:	f7ff febe 	bl	800175c <LL_RCC_GetAPB2Prescaler>
 80019e0:	4603      	mov	r3, r0
 80019e2:	0adb      	lsrs	r3, r3, #11
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	461a      	mov	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	40d3      	lsrs	r3, r2
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08002274 	.word	0x08002274

080019fc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001a0a:	f7ff fee3 	bl	80017d4 <LL_RCC_PLL_GetMainSource>
 8001a0e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d003      	beq.n	8001a24 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001a1c:	e005      	b.n	8001a2a <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001a20:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001a22:	e005      	b.n	8001a30 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001a26:	60fb      	str	r3, [r7, #12]
      break;
 8001a28:	e002      	b.n	8001a30 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001a2c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001a2e:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001a30:	f7ff feec 	bl	800180c <LL_RCC_PLL_GetPrediv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	3301      	adds	r3, #1
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	fbb2 f4f3 	udiv	r4, r2, r3
 8001a3e:	f7ff fed7 	bl	80017f0 <LL_RCC_PLL_GetMultiplicator>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001a48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001a4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	fa92 f2a2 	rbit	r2, r2
 8001a54:	603a      	str	r2, [r7, #0]
  return result;
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	fab2 f282 	clz	r2, r2
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	40d3      	lsrs	r3, r2
 8001a60:	3302      	adds	r3, #2
 8001a62:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	003d0900 	.word	0x003d0900
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <LL_TIM_SetPrescaler>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_TIM_SetAutoReload>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_TIM_SetRepetitionCounter>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	615a      	str	r2, [r3, #20]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <LL_TIM_Init+0xd0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <LL_TIM_Init+0x28>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d003      	beq.n	8001b14 <LL_TIM_Init+0x28>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <LL_TIM_Init+0xd4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d106      	bne.n	8001b22 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <LL_TIM_Init+0xd0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <LL_TIM_Init+0x66>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d00f      	beq.n	8001b52 <LL_TIM_Init+0x66>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <LL_TIM_Init+0xd4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00b      	beq.n	8001b52 <LL_TIM_Init+0x66>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <LL_TIM_Init+0xd8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <LL_TIM_Init+0x66>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <LL_TIM_Init+0xdc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d003      	beq.n	8001b52 <LL_TIM_Init+0x66>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <LL_TIM_Init+0xe0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d106      	bne.n	8001b60 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff91 	bl	8001a94 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff7d 	bl	8001a78 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LL_TIM_Init+0xd0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00b      	beq.n	8001b9e <LL_TIM_Init+0xb2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <LL_TIM_Init+0xd8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <LL_TIM_Init+0xb2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <LL_TIM_Init+0xdc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d003      	beq.n	8001b9e <LL_TIM_Init+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <LL_TIM_Init+0xe0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d105      	bne.n	8001baa <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7c1b      	ldrb	r3, [r3, #16]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff83 	bl	8001ab0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff8e 	bl	8001acc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40014000 	.word	0x40014000
 8001bc8:	40014400 	.word	0x40014400
 8001bcc:	40014800 	.word	0x40014800

08001bd0 <LL_USART_IsEnabled>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <LL_USART_IsEnabled+0x18>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <LL_USART_IsEnabled+0x1a>
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_USART_SetStopBitsLength>:
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_USART_SetHWFlowCtrl>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_USART_SetBaudRate>:
{
 8001c42:	b490      	push	{r4, r7}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c56:	d116      	bne.n	8001c86 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	005a      	lsls	r2, r3, #1
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	441a      	add	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001c72:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	60dc      	str	r4, [r3, #12]
}
 8001c84:	e00a      	b.n	8001c9c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	085a      	lsrs	r2, r3, #1
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	60da      	str	r2, [r3, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc90      	pop	{r4, r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff88 	bl	8001bd0 <LL_USART_IsEnabled>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d14e      	bne.n	8001d64 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <LL_USART_Init+0xc8>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	6851      	ldr	r1, [r2, #4]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6912      	ldr	r2, [r2, #16]
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	6992      	ldr	r2, [r2, #24]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff80 	bl	8001bf6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff8d 	bl	8001c1c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <LL_USART_Init+0xcc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d104      	bne.n	8001d14 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff fdb2 	bl	8001874 <LL_RCC_GetUSARTClockFreq>
 8001d10:	61b8      	str	r0, [r7, #24]
 8001d12:	e016      	b.n	8001d42 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <LL_USART_Init+0xd0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d107      	bne.n	8001d2c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fd81 	bl	8001828 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	e00a      	b.n	8001d42 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <LL_USART_Init+0xd4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d106      	bne.n	8001d42 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fd75 	bl	8001828 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001d50:	2300      	movs	r3, #0
 8001d52:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69b9      	ldr	r1, [r7, #24]
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ff6f 	bl	8001c42 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	efff69f3 	.word	0xefff69f3
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40004400 	.word	0x40004400
 8001d7c:	40004800 	.word	0x40004800

08001d80 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <LL_InitTick+0x30>)
 8001d94:	3b01      	subs	r3, #1
 8001d96:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <LL_InitTick+0x30>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <LL_InitTick+0x30>)
 8001da0:	2205      	movs	r2, #5
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffdd 	bl	8001d80 <LL_InitTick>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <LL_SetSystemCoreClock+0x1c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <__libc_init_array>:
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	4e0d      	ldr	r6, [pc, #52]	; (8001e28 <__libc_init_array+0x38>)
 8001df4:	4c0d      	ldr	r4, [pc, #52]	; (8001e2c <__libc_init_array+0x3c>)
 8001df6:	1ba4      	subs	r4, r4, r6
 8001df8:	10a4      	asrs	r4, r4, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	42a5      	cmp	r5, r4
 8001dfe:	d109      	bne.n	8001e14 <__libc_init_array+0x24>
 8001e00:	4e0b      	ldr	r6, [pc, #44]	; (8001e30 <__libc_init_array+0x40>)
 8001e02:	4c0c      	ldr	r4, [pc, #48]	; (8001e34 <__libc_init_array+0x44>)
 8001e04:	f000 f818 	bl	8001e38 <_init>
 8001e08:	1ba4      	subs	r4, r4, r6
 8001e0a:	10a4      	asrs	r4, r4, #2
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	42a5      	cmp	r5, r4
 8001e10:	d105      	bne.n	8001e1e <__libc_init_array+0x2e>
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e18:	4798      	blx	r3
 8001e1a:	3501      	adds	r5, #1
 8001e1c:	e7ee      	b.n	8001dfc <__libc_init_array+0xc>
 8001e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e22:	4798      	blx	r3
 8001e24:	3501      	adds	r5, #1
 8001e26:	e7f2      	b.n	8001e0e <__libc_init_array+0x1e>
 8001e28:	0800227c 	.word	0x0800227c
 8001e2c:	0800227c 	.word	0x0800227c
 8001e30:	0800227c 	.word	0x0800227c
 8001e34:	08002280 	.word	0x08002280

08001e38 <_init>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr

08001e44 <_fini>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr
